# Generated by Django 5.2.1 on 2025-06-03 18:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import grannsacker_foodgram.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Название ингредиента",
                        max_length=150,
                        unique=True,
                        verbose_name="Название",
                    ),
                ),
                (
                    "measurement_unit",
                    models.CharField(
                        help_text="Единица измерения",
                        max_length=10,
                        verbose_name="Единица измерения",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ингредиент",
                "verbose_name_plural": "Ингредиенты",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "Пользователь с таким email уже зарегистрирован"
                        },
                        help_text="Укажите действующий email — он будет использоваться для входа",
                        max_length=150,
                        unique=True,
                        verbose_name="Электронная почта",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "bad_word": "Нельзя использовать данное слова для юзернейма",
                            "unique": "Пользователь с таким именем уже существует",
                        },
                        help_text="Уникальное имя пользователя для авторизации",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator(),
                            grannsacker_foodgram.validators.forbidden_words_validator,
                        ],
                        verbose_name="Имя пользователя",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        error_messages={
                            "bad_word": "Нельзя использовать данное слова для имени"
                        },
                        help_text="Ваше имя",
                        max_length=150,
                        validators=[
                            grannsacker_foodgram.validators.forbidden_words_validator,
                            grannsacker_foodgram.validators.only_letters_validator,
                        ],
                        verbose_name="Имя",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        error_messages={
                            "bad_word": "Нельзя использовать данное слова для фамилии"
                        },
                        help_text="Ваша фамилия",
                        max_length=150,
                        validators=[
                            grannsacker_foodgram.validators.forbidden_words_validator,
                            grannsacker_foodgram.validators.only_letters_validator,
                        ],
                        verbose_name="Фамилия",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Загрузите изображение профиля (необязательно)",
                        null=True,
                        upload_to="avatars/",
                        verbose_name="Аватар",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользователь",
                "verbose_name_plural": "Пользователи",
                "ordering": ["id"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=150, verbose_name="Название рецепта"),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="recipes/", verbose_name="Изображение рецепта"
                    ),
                ),
                ("text", models.TextField(verbose_name="Описание рецепта")),
                (
                    "cooking_time",
                    models.PositiveSmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, "Время приготовления должно быть не менее 1 минуты"
                            ),
                            django.core.validators.MinValueValidator(
                                9999,
                                "Время приготовления должно быть не менее 9999 минуты",
                            ),
                        ],
                        verbose_name="Время приготовления (в минутах)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата публикации"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор рецепта",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рецепт",
                "verbose_name_plural": "Рецепты",
                "ordering": ["-created_at", "name"],
            },
        ),
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Количество ингредиентов, необходимое для рецепта",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, "Количество должно быть не менее 1"
                            ),
                            django.core.validators.MaxValueValidator(
                                99, "Количество должно быть не более 99"
                            ),
                        ],
                        verbose_name="Количество",
                    ),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        help_text="Ингредиент, используемый в рецепте",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe_ingredients",
                        to="grannsacker_foodgram.ingredient",
                        verbose_name="Ингредиент",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        help_text="Рецепт, к которому относится ингредиент",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe_ingredients",
                        to="grannsacker_foodgram.recipe",
                        verbose_name="Рецепт",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ингредиент в рецепте",
                "verbose_name_plural": "Ингредиенты в рецептах",
                "ordering": ["recipe", "ingredient"],
            },
        ),
        migrations.AddField(
            model_name="recipe",
            name="ingredients",
            field=models.ManyToManyField(
                through="grannsacker_foodgram.RecipeIngredient",
                to="grannsacker_foodgram.ingredient",
                verbose_name="Ингредиенты для рецепта",
            ),
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата подписки",
                        verbose_name="Дата подписки",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="Пользователь, на которого подписываются",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="following",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор рецепта",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Пользователь, который подписывается на автора",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="follower",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Подписчик",
                    ),
                ),
            ],
            options={
                "verbose_name": "Подписка",
                "verbose_name_plural": "Подписки",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Favorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "added_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Когда рецепт был добавлен в избранное",
                        verbose_name="Дата добавления",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Пользователь, который добавил рецепт в избранное",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorites",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        help_text="Рецепт, добавленный в избранное",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="grannsacker_foodgram.recipe",
                        verbose_name="Рецепт",
                    ),
                ),
            ],
            options={
                "verbose_name": "Избранное",
                "verbose_name_plural": "Избранное",
                "ordering": ["-added_at", "user"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user", "recipe"), name="unique_favorite_recipe"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "added_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Когда рецепт был добавлен в корзину",
                        verbose_name="Дата добавления",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Пользователь, которому принадлежит корзина",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        help_text="Рецепт, добавленный в корзину",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart_by",
                        to="grannsacker_foodgram.recipe",
                        verbose_name="Рецепт",
                    ),
                ),
            ],
            options={
                "verbose_name": "Список покупок",
                "verbose_name_plural": "Списки покупок",
                "ordering": ["-added_at", "user"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user", "recipe"), name="unique_favorite"
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="recipeingredient",
            constraint=models.UniqueConstraint(
                fields=("recipe", "ingredient"), name="unique_recipe_ingredient"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("user", "author"), name="unique_subscription"
            ),
        ),
    ]
